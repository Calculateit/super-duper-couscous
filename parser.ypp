%{
	#include <string>
    #include "stdio.h"
    #include "stdlib.h"
    #include <map>
    #include <iostream>
    #include <fstream>
	#define YYSTYPE std::string
	
	std::map<std::string, std::string> inited_vars;							
	//Ассоц. массив для хранения иниц. переменных
	
	void addOrChangeVar(const std::string& varName, const std::string& varMeaning);	
	//Изменяет или добавляет переменную и её значение в ассоц.массив
	//(принимает соотв. имя и значение перем.)
																		
	bool isVarInited(const std::string& varName, bool warnFlag);						
	//Проверяет, инициализирована ли переменная с данным именем
	//(принимает имя перем.и флаг, показывающий, нужно ли выдавать 
	//предупреждение о том, что перем. неинициализирована или нет;
	// возвращает true - инициализирована, false - нет)

	std::ofstream file;//Объект файла
    extern int yylineno;//Переменная, хранящая номер обрабатываемой строки
    extern int yylex();
    void yyerror(char *s);
%}

%token IF FI ELSE THEN FOR_ WHILE DO DONE ECHO_
%token EQ LE GE NE AND OR
%token NUM ID

%start start

%left AND OR 

%left '>' '<' EQ NE GE LE
%left '+' '-' '%'
%left '*' '/'

%%
/*start:	statement		{ file<<$1 + '\n'; }
|		start statement	{ file<<$2 + '\n'; }
;
*/
start:	assignment			{ file<<$1 + '\n'; }
|		start assignment	{ file<<$2 + '\n'; }
|		for_stmt			{ file<<$1; }
|		start for_stmt		{ file<<$2; }
|		while_stmt			{ file<<$1; }
|		start while_stmt	{ file<<$2; }
|		if_stmt				{ file<<$1; }
|		start if_stmt		{ file<<$2; }
|		echo_stmt			{ file<<$1; }
|		start echo_stmt		{ file<<$2; }
;

for_stmt: 		FOR_ '(' '(' inline_statement ';' expression ';' inline_statement ';' ')' ')' DO statement DONE
	{ $$ = "for (" + $4 + $6 + "; " + $8 + ") {\n" + $13 + "}\n"; }
;

while_stmt:		WHILE '[' expression ';' ']' DO statement DONE				
	{ $$ = "while (" + $3 + ") {\n" + $7 + "}\n"; }
;

if_stmt:		IF '[' expression ';' ']' THEN statement FI	
	{ $$ = "if (" + $3 + ") {\n" + $7 + "}\n"; }
|				IF '[' expression ';' ']' THEN statement ELSE statement FI	
	{ $$ = "if (" + $3 + ") {\n" + $7 + "}" + "else {\n" + $9 + "}\n"; }
;

inline_statement:	assignment					{ $$ = $1;		}
|					assignment statement		{ $$ = $1 + $2; }
|					for_stmt					{ $$ = $1;		}
|					for_stmt statement			{ $$ = $1 + $2; }
|					while_stmt					{ $$ = $1; 		}
|					while_stmt statement		{ $$ = $1 + $2; }
|					if_stmt						{ $$ = $1; 		}
|					if_stmt statement			{ $$ = $1 + $2; }
|					echo_stmt					{ $$ = $1; 		}
|					echo_stmt statement			{ $$ = $1 + $2; }
;

statement: 		assignment					{ $$ = $1 + '\n';		}
|				assignment statement		{ $$ = $1 + '\n' + $2; 	}
|				for_stmt					{ $$ = $1;				}
|				for_stmt statement			{ $$ = $1 + $2; 		}
|				while_stmt					{ $$ = $1; 				}
|				while_stmt statement		{ $$ = $1 + $2; 		}
|				if_stmt						{ $$ = $1; 				}
|				if_stmt statement			{ $$ = $1 + $2; 		}
|				echo_stmt					{ $$ = $1; 				}
|				echo_stmt statement			{ $$ = $1 + $2; 		}
;

echo_stmt:		ECHO_ expression { $$ = "printf(\"%d\", " + $2 + ");\n"; }
;

assignment: 	ID '=' expression	
	{ isVarInited($1, false) ? ($$ = $1 + '=' + $3 + "; ") : 
		($$ = "int " + $1 + '=' + $3 + "; "); addOrChangeVar($1, $3); }
;	//Проверка на то, была инициализирована переменная до этого или нет.
	//Токену присваивается соотв. этой проверке значение из языка Си.

expression:		term						{ $$ = $1; 				}
|				expression '+' expression	{ $$ = $1 + '+' + $3; 	}
|				expression '-' expression	{ $$ = $1 + '-' + $3; 	}
|				expression '*' expression	{ $$ = $1 + '*' + $3; 	}
|				expression '/' expression	{ $$ = $1 + '/' + $3; 	}
|				expression '%' expression	{ $$ = $1 + '%' + $3; 	}
|				expression '<' expression	{ $$ = $1 + '<' + $3; 	}
|				expression '>' expression	{ $$ = $1 + '>' + $3; 	}
|				expression GE expression	{ $$ = $1 + ">=" + $3;	}
|				expression LE expression	{ $$ = $1 + "<=" + $3;	}
|				expression EQ expression	{ $$ = $1 + "==" + $3;	}
|				expression NE expression	{ $$ = $1 + "!=" + $3;	}
|				'(' expression ')'			{ $$ = '(' + $2 + ')';	}
|				expression AND expression	{ $$ = $1 + "&&" + $3;	}
|				expression OR expression	{ $$ = $1 + '||' + $3; 	}
;

term: 	NUM	{ $$ = $1; }
| 		ID	{ isVarInited($1, true); $$ = $1; }
;

%%
void addOrChangeVar(const std::string& varName, const std::string& varMeaning) {
	inited_vars.insert_or_assign(varName, varMeaning);
}

bool isVarInited(const std::string &varName, bool warnFlag) {
	if(inited_vars.find(varName) != inited_vars.end()) {
		return true;
	}
	if(warnFlag) {
		yyerror("not initialized variable");
	}
	return false;
}

void yyerror(char *s) {
	std::cerr<<yylineno<<": "<<s<<std::endl;
  	exit(1);
}
    
int main() { 
	//yydebug = 1;
	file.open("output.txt", std::ofstream::app);
	
	return yyparse();
}
